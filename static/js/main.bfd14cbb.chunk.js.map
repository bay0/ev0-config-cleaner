{"version":3,"sources":["assets/img/logo192.png","Components/App.js","Components/Theme.js","serviceWorker.js","index.js"],"names":["module","exports","Transition","React","forwardRef","props","ref","Slide","direction","useStyles","makeStyles","theme","grid","position","top","transform","paper","padding","border","fntSize","fontSize","heading","typography","pxToRem","fontWeight","fontWeightRegular","dialog","minWidth","App","classes","useState","luas","setLuas","open","setOpen","handleClose","onDrop","useCallback","acceptedFiles","reader","FileReader","configName","name","onload","event","config","JSON","parse","target","result","Object","keys","lua","filter","length","toast","success","POSITION","TOP_RIGHT","configname","a","document","createElement","file","Blob","stringify","type","href","URL","createObjectURL","download","click","saveConfig","readAsText","err","error","BOTTOM_CENTER","useDropzone","getRootProps","getInputProps","isDragActive","Typography","variant","component","gutterBottom","role","aria-label","src","EVOLOGO","alt","Grid","className","container","justify","Paper","multiple","accept","display","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","map","luaData","ExpansionPanel","key","ExpansionPanelSummary","expandIcon","id","color","ExpansionPanelDetails","data","DialogActions","Button","onClick","createMuiTheme","palette","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bfd14cbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.974111fb.png\";","import React, {useCallback, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport { toast } from 'react-toastify';\nimport JSONPretty from 'react-json-pretty';\nimport 'react-json-pretty/themes/monikai.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport EVOLOGO from '../assets/img/logo192.png';\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles((theme) => ({\n  grid: {\n    position: 'absolute', \n    top: '50%',\n    transform: 'translateY(-50%)',\n  },\n  paper: {\n    padding: 80,\n    border: '2px dashed white',\n  },\n  fntSize: {\n    fontSize: 20,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  dialog: {\n    minWidth: 600,\n  },\n}));\n\nconst saveConfig = (config, configname) => {\n  let a = document.createElement(\"a\");\n  let file = new Blob([JSON.stringify(config, null, 2)], {type: 'application/json'});\n  a.href = URL.createObjectURL(file);\n  a.download = configname;\n  a.click();\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [luas, setLuas] = useState({});\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    try {\n      let reader = new FileReader();\n      const configName = acceptedFiles[0].name;\n      reader.onload = (event) => {\n          let config = JSON.parse(event.target.result)\n          if(Object.keys(config.lua).filter(lua => lua !== \"input_toggle_key\").length !== 0) {\n            handleOpen();\n            setLuas(config.lua);\n            config.lua = {\n                \"input_toggle_key\": {\n                  \"value\": 36\n              }\n            };\n            toast.success(\"Config cleaned!\", {\n              position: toast.POSITION.TOP_RIGHT\n            });\n            saveConfig(config, configName)\n          } else {\n            toast.success(\"Config doesn't have lua's!\", {\n              position: toast.POSITION.TOP_RIGHT\n            });\n          }\n      };\n      reader.readAsText(acceptedFiles[0]);\n    } catch (err) {\n      toast.error(\"Error !\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <>\n      <>\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n          ev0-config-cleaner\n        </Typography>\n        <Typography>\n          Made with <span role=\"img\" aria-label=\"heart\">❤️</span> by bay\n        </Typography>\n        <img src={EVOLOGO} alt=\"evo logo\" />\n      </>\n      <Grid className={classes.grid} container justify=\"center\">\n        <Paper className={classes.paper} {...getRootProps()}>\n          <input {...getInputProps()} multiple={false} accept=\"application/json\" />\n          {\n            isDragActive ?\n              <Typography className={classes.fntSize} variant=\"overline\" display=\"block\" gutterBottom>\n                Drop config here\n              </Typography> :\n              <Typography className={classes.fntSize} variant=\"overline\" display=\"block\" gutterBottom>\n                Drag 'n' drop config here, or click to select config\n              </Typography>\n          }\n        </Paper>\n      </Grid>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n      >\n        <DialogTitle>{\"Removed lua's\"}</DialogTitle>\n        <DialogContent className={classes.dialog}>\n          <DialogContentText>\n            {Object.keys(luas).filter(lua => lua !== \"input_toggle_key\").map(lua => {\n              const luaData = luas[lua];\n              return (\n                <ExpansionPanel key={`${lua}-key`}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    id={`${lua}-panel`}\n                  >\n                    <Typography className={classes.heading} color={luaData === null ? \"error\" : \"\" } >{lua}</Typography>\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                    <JSONPretty id={`${lua}-pretty`} data={luaData}></JSONPretty>\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n              )\n            })}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" onClick={handleClose} color=\"secondary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default App;\n","import  { createMuiTheme } from '@material-ui/core';\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n    },\r\n    \r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport  { CssBaseline } from '@material-ui/core';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { theme } from './Components/Theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n    <ToastContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}